// UNTESTED sketch
new log, CrowdFund,
REVAddress(`rho:REVAddress`) in {
  contract CrowdFund(@target /\ Int, @deadline /\ Int, ret1) = {
    new beneficiarySeat, publicFacet, holdingsCh in {
      ret1!({"beneficiarySeat": *beneficiarySeat, "publicFacet": publicFacet}) |

      holdingsCh!([])
      |
      contract beneficiarySeat(@"claim", dest, ret) = {
        if (BLOCK_TIME < deadline) {
          ret3!((false, {"deadline": deadline, "current": BLOCK_TME,
            "message": "payout not available until after deadline"}))
        } else if (contributionTotal < target) {
          ret3!((false, {"deadline": deadline, "current": BLOCK_TME,
            "message": "funding target not reached"}))
        } else {
          for (@holdings <<- holdingsCh) {
            parallelMap(holdings, transfer!(EACH, dest, ACC), *ret)
          }
        }
      }
      |
      contract publicFacet(@"status", return) = {
        return!({"terms": {"target": target, "deadline": deadline}, "pledges": pledges})
      }
      |
      contract publicFacet(@"contribute",
        // a payment is a vault from unforgeable along with the unforgeable
        @{"vault": *pv, "key": *punf},
        ret2
      ) = {
        new refundCh, contributorSeat in {
          REVAddress!("fromUnforgeable", *self, *contributorSeat) | for(refund <- refundCh) {
            new txCh in {
              transfer!({"vault": *pv, "key": *punf}, refund, *ack) | for (@txOk <- txCh) {
                match txOk {
                  true => for (@true <- ack) {
                    ret2!(contributorSeat) |
                    contract contributorSeat("withdraw", ret3) = {
                      if(BLOCK_TIME <= deadline) {
                        ret3!((false, {"deadline": deadline, "current": BLOCK_TME,
                          "message": "refund not available until after deadline"}))
                      } else if (contributions >= target) {
                        ret3!((false, {"contributions": TODO, "target": target,
                          "message": "refund not available after funding target reached"}))
                      } else {
                        for (@holdings <- holdingsCh) {
                          holdingsCh!(holdings ++ [refund]) |
                          ret3!((true, "pledge accepted"))
                        }
                      }
                    }
                  }
                  _ => ret3!((false, "tx failed @@why"))
                }
              }
            }
          }
        }
      }
    }
  }
}
