#!/bin/bash

cd `dirname $0`

./stop-rnode
if [ $? -ne 0 ] ; then exit $?; fi

[ -d ~/.rnode ] && echo "
$0: $HOME/.rnode exists. Use 'rm -rf $HOME/.rnode' to fix.
" && while read -p "$0: Execute 'rm -rf $HOME/.rnode' [y]? " response;do
	if [ "$response" == "y" ] || [ -z "$response" ];then
      set -x
		rm -rf $HOME/.rnode
      set +x
		break
	else
		echo "$0: Aborting $0"
		exit 1
	fi
done

mkdir -p checkpoint 2>/dev/null

ME=`basename $0`

./list-checkpoints.sh |grep "$ME" >/dev/null 2>&1 && echo "
$ME checkpoint exists.
" && while read -p "Use checkpoint instead of re-running $ME [y]? " response;do
	if [ "$response" == "y" ] || [ -z "$response" ];then
		./restore-checkpoint.sh $ME
		exit 0
	else
		echo "Rerunning $ME"
		break
	fi
done

set -x

LOGFILE="$0.log"

private_key=`cat pk.bootstrap`

mkdir -p ~/.rnode || exit 3
tar cf - genesis|(cd ~/.rnode; tar xvf -) || exit 3

rnode run -s \
	--validator-private-key $private_key \
	--dev-mode \
	-XX:MaxDirectMemorySize=100m -XX:MaxRAMPercentage=25 \
	> $LOGFILE 2>&1 &

PID=$!

# The previous command doesn't produce output -- but this one makes up for that
tail -f $LOGFILE|sed -e '/Making a transition to Running state./q'

echo "$ME: Stopping $ME rnode process"
sleep 3 && kill $PID && sleep 3

echo "$0: Creating $ME checkpoint"
./create-checkpoint.sh $ME

stty echo
