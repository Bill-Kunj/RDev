new
   Echo
   ,stdout(`rho:io:stdout`)
in
{  stdout!("Echo class creation")
|  contract Echo(message, caps) = {
   new
      raw
      ,more
   in
   {  caps!(bundle+{*raw}, bundle+{*more})
   |  contract raw(return) =
      {  stdout!("raw method: " ++ *message)
      |  return!(*message)
      }
   |  contract more(return) =
      {  stdout!("more method: more " ++ *message)
      |  return!("more " ++ *message)
      }
   }
}
|
new
   caps
   ,ret_raw
   ,ret_more
   ,lookup_ret_raw
   ,lookup_ret_more
   ,lookupCaps
   ,insertArbitrary(`rho:registry:insertArbitrary`)
   ,uriCh
   ,lookup(`rho:registry:lookup`)
   ,lookupCh
in
{  // print out the unforgeable for the class
   stdout!({"Echo unforgeable": bundle+{*Echo}})

   // create uri for the class and print it
|  insertArbitrary!(bundle+{*Echo}, *uriCh)
|  for (URI_Echo <- uriCh)
   {  stdout!(["#define $Echo", *URI_Echo])

   // lookup the uri for the class and test it
   |  lookup!(*URI_Echo, *lookupCh)
   |  for (lookup_Echo <- lookupCh)
      {  stdout!({"lookup unforgeable": *lookup_Echo})
      |  lookup_Echo!("lookup", *lookupCaps)
      |  for (lookup_rawCap, lookup_moreCap <- lookupCaps)
         {  lookup_rawCap!(*lookup_ret_raw)
         |  stdout!({"lookup raw cap": *lookup_rawCap, "lookup raw return": *lookup_ret_raw})
         |  lookup_moreCap!(*lookup_ret_more)
         |  stdout!({"lookup more cap": *lookup_moreCap, "lookup more return": *lookup_ret_more})
         }
      }
   }
   // create an instance and print the capabilities
   // If possible excercise the capabilities
|  Echo!("test", *caps)
|  for (rawCap, moreCap <- caps)
   {  rawCap!(*ret_raw)
   |  stdout!({"test raw cap": *rawCap, "test raw return": *ret_raw})
   |  moreCap!(*ret_more)
   |  stdout!({"test more cap": *moreCap, "test more return": *ret_more})
   }
}
}
